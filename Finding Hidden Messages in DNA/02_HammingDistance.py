"""
We say that position i in k-mers p1 … pk and q1 … qk is a mismatch if pi ≠ qi. 
For example, CGAAT and CGGAC have two mismatches. 
The number of mismatches between strings p and q is called the Hamming distance between these strings and is denoted HammingDistance(p, q).

Hamming Distance Problem: Compute the Hamming distance between two strings.

Input: Two strings of equal length.
Output: The Hamming distance between these strings.
"""

def HammingDistance(string1, string2):
    distance = 0
    for i in range(len(string1)):
        if string1[i] != string2[i]:
            distance += 1
    return distance

if __name__ == "__main__":
    for i in range(5):
        file_input = open(f"HammingDistance/inputs/input_{i + 1}.txt")
        file_input_text = file_input.readlines()
        string1 = file_input_text[0].strip()
        string2 = file_input_text[1].strip()

        file_output = open(f"HammingDistance/outputs/output_{i + 1}.txt")
        file_output_text = file_output.read().strip()

        if int(file_output_text) == HammingDistance(string1, string2):
            print("yes")
        else:
            print(f"{i+1} no {HammingDistance(string1, string2)}, {file_output_text}")
    
    string1 = "GGTTGCAGCTGCAGACATGTGACCCGCGGGTTTTGGCTTAACCAGACATCAATCGCGAACATGTAACGCATATGTCTTTTAAGGAATTGAGCATTAAGATTACCTAATCTTACCTACCATAGTGAACTGCGATGCAGCAAACATTCGTTCGAGAACGCCTTCTCTTGAAGGTGGATATCTGATCCCCCAGGTTACGACCAATGCTATCATCTGACGTTCCTCCAATGCAGCAACATTTTCTAATATGTTTTTCGAGGGTACCTCCAAGTGTAACGGAAATGCCTTAAGAGAAGAGGGACATCGGGAGCTTGGGATAAAAGGAGGATATCGCCTAATTAGGAGATTGCAAATCGAGCTTCCGCGTGCTGCCCTGTTCAAGTGTGAGATTTCGCATTTGCATTGTGGATAGTTCTTTTATCACTCGAGCCCGGTACGGGGCCGATGTGTCCTCTGTTACAGGTAGTCAGAATTAAAATTCCGTTCGGGGAAGAGGTATTGAGATGATACTTTAATAGCACTGGAGATGCGGGTCCTCGCCTATCGAGTATTAGGTGCAGTGTTATCATGTCCCTATCGAAACCCGTATGTTTAGCGTTTCCTTGTTAAGCGTAGCACCACCCAGTAACAATGTGTGCTGTTACTTCCTGGTTCCGAGGGCGAACGCTCCACAGATAACGTGGAAAGCTAGCGTCGTTAGTAGGTGGGACTAATCCACCTTGCATGTGCTTGTGGAGGAACCAGCCGGCATGCCGCTAGTGATTGTCAATGGAGTCAATGTACCGGTGTATCGGCAAGAAGTTATTTAGGGCTTTCAAAGTAATAAAAGCCTAAAATTCTTCGTTGCAGTGCATCCTTAATTACTAGAACAGTAGTAATCTATATTTTCATTCATCTAGGGATATCCCGAACCAACATAGGCGGCAATCATTAGGGGATGGGTTGTCTGAAGTCACTAAGGGTACCAGCCTGGGAGGTGGGCTGCCTGTCAGTACGCGCGCAGCGTGCCACTGACCCAGAGTTTTACTGGTGGAGTTGCAGCAGGAGACGAAACTGTCTCAACGGTAGATAATTGGATTACCATCGCTCCCCTCTGGGACGCCAATACTTACCGCACCCTGGGCCGGTCGCCAACTTGCGGCGAGGTGTTGCGTAGAAACTCAATAGTACAAGGGTATATCCACGCAA"
    string2 = "GCTAACGATATCTGTTTAGAGTTCGAGGCTACTAATAGGTTCATGTCCTGAGAATTTTTTTAGTTAGTGCGTATCTCTTCCGGTATTGTTCTGTTCACTTGCAAGTCGTTCTCGGCTTGAGTTTCTTAGGACAGGTGGGTATAAGCCCGGCTTGAGAGTCTCGAGTGTTATACTTAAGGCAATCCTAGATCACCCACCAAAAGCTGAGCACCTAACGAGTAGATCGCACTATATTTAAGTACCGGGGATTCTGCTTAACACCTAGAAGACTGCTGACTGACCTGTTTAGAGTAAGCTTACCTACCAGGTTACACATTCACAGAGTAATGCAGCCAGTGCAACTTGCCCGGGGCATATTATTTGGACGCCCCCCCCCACGAGTGAACAAAAGCCTCAAGACGGCTTTTAAATTCATGTCTCGGATAGTTGGACAAGGTATCTGATCGATTACTTGCACGAATACTACGCCCCCCGAGGGTTATTCCATAGTCGAGGTTAGGAGTGCTTCGCGTCTATCACATGATATAAGTCATTCCCGTTACGGATCAGTATTCTCCACTGGACTAATGCGGACCCCGACAGGAAGGTGCATTTACCTGACAGTACGTGTATGCTGGGTAGGTCATTGATCAAGTCGCTTCGGTAAAAGTACTACACGTGTTGGGACCTCGTTAAGATGAGTGACGTACAGGGGTTTGTCAATTATTGCGTCGAGGGCTGTGAGCCTGAGCGCCTAATCCTACACTCGGATAAGCTCACCAATATCGCGGGTCCCGTAACTCTGGCTTACGCTGCTGCCGAGGTTAAGTATCCCACAGGACCACGCACCCGCTGAACCATGCACATGTAGCCCGTAGGCTTCCTTGAGGATTCTGCAAAATTTCATAGTGTTCTTAGTCACTGTTTTGGAGTGCCGCCTACGAGAATAGGAAGCTGGAACTCACGATGAGATGTATGAACGCGGCCTCACATGTGGTAATGGCACGTAGGCTAAGCCTACCGCACTTTTGCAGTGGCGGTGCATACTCCATGAGCGTGGGTAGTGGCGATATTGTACGCTCTGTAGGTGACTTTAAGACTGCCCGGGTAGAGCCGGTAAATCTCCGACAGATTCCTCATAATAGTACACTTGTCACTCGCGCAGCCGACTACCTGAGCCTGGAACTCAGAGGTAGCCATTCACAG"
    print(HammingDistance(string1, string2))

    string1 = "CTACAGCAATACGATCATATGCGGATCCGCAGTGGCCGGTAGACACACGT" 
    string2 = "CTACCCCGCTGCTCAATGACCGGGACTAAAGAGGCGAAGATTATGGTGTG"
    print(HammingDistance(string1, string2))